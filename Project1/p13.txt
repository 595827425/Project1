
----------------------------------------------
//字符的输入输出，转义系统声音

#include<stdlib.h>
#include<stdio.h>
#include<Windows.h>

int main()
{
	char ch = getchar();//等待输入一个字符，回车也是一个字符
	putchar(ch);//输出一个字符

	while (-1)
	{
		putchar('\a');//打开系统声音
		Sleep(1000);
	}

	system("pause");
	return 1;
}

----------------------------------------------
//1，内存如何查看
//2，常量赋值的方案一，代码里直接赋值

#include<stdio.h>
int main()
{
	int a = 10;//若不赋值，则会出现内存中以前的数值
	printf("%p", &a);//查看a的内存地址，调试-窗口-内存
	printf("\n%d", a);
	//a的内存地址会显示0a，16进制的10
	return getchar();

	//常量原理：a = 10 ，10是代码区符号表10
}

----------------------------------------------
//1，常量赋值的方案二，const额外声明不可修改的变量，
//后面代码里无法修改，但是用汇编，可以修改内存
//2，☆汇编操作寄存器！！！！

#include<stdio.h>
int main()
{
	const int a = 10;
	//a = 9;这样不让编译

	//以下方法为汇编方法
	//eax为寄存器
	_asm 
	{
		mov eax,a //把a的值放入寄存器
		add eax,5 //增加了5
		mov a,eax //把寄存器里的值放入a
	}

	printf("%p", &a);
	return getchar();
}

----------------------------------------------
//1，常量赋值的方案三，define里直接赋值，该定义的常量无法修改，从寄存器中获取该11
//2，define不能加 逗号

#include<stdio.h>
#define a 11
int main()
{
	printf("%p", a);//0000000B,不是&a了，因为已经在定义好了
	return getchar();
}


----------------------------------------------
//1，异或的相加换值，可以防止内存溢出,可以用于密码加密解密
//2，时间复杂度(执行次数，相加，赋值等)
//3，空间复杂度(内存地址占用数，变量数)
#include<stdio.h>
int main()
{
	int a = 5, b = 10;
	printf("a=%d,b=%d", a, b);

	a = a ^ b;
	b = a ^ b;
	a = a ^ b;

	printf("\na=%d,b=%d", a, b);
	return getchar();
}